select(-CI, -p.value, -estimate)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(toffee)
library(xtable)
make_model_tbl <- function(model){
tidy(model) %>%
mutate(star = ifelse(p.value < 0.05, "*", "")) %>%
mutate(O.R. = exp(estimate)) %>%
mutate(p.value = ifelse(p.value < 0.001, "<0.001", as.character(round(p.value, 3)))) %>%
mutate(p.value = paste0(p.value, star)) %>%
mutate(C.I. = CI_fmt(estimate, std.error)) %>%
dplyr::select(term, estimate, C.I., p.value)
}
omnibus.model.params <- tidy(mod.frac_problematic_pref) %>%
select(cols) %>%
mutate(estimate.omnibus = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
# add confidence interval column
mutate(CI = toffee_tbl(mod.frac_problematic_pref)$CI) %>%
# put CI below estimate
mutate(estimate.omnibus = paste0("\\shortstack{", estimate.omnibus,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
library(tidyr)
tidy
tidy()
library(tidyverse)
tidy()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(toffee)
library(xtable)
make_model_tbl <- function(model){
tidy(model) %>%
mutate(star = ifelse(p.value < 0.05, "*", "")) %>%
mutate(O.R. = exp(estimate)) %>%
mutate(p.value = ifelse(p.value < 0.001, "<0.001", as.character(round(p.value, 3)))) %>%
mutate(p.value = paste0(p.value, star)) %>%
mutate(C.I. = CI_fmt(estimate, std.error)) %>%
dplyr::select(term, estimate, C.I., p.value)
}
omnibus.model.params <- tidy(mod.frac_problematic_pref) %>%
select(cols) %>%
mutate(estimate.omnibus = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
# add confidence interval column
mutate(CI = toffee_tbl(mod.frac_problematic_pref)$CI) %>%
# put CI below estimate
mutate(estimate.omnibus = paste0("\\shortstack{", estimate.omnibus,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(toffee)
library(xtable)
make_model_tbl <- function(model){
tidy(model) %>%
mutate(star = ifelse(p.value < 0.05, "*", "")) %>%
mutate(O.R. = exp(estimate)) %>%
mutate(p.value = ifelse(p.value < 0.001, "<0.001", as.character(round(p.value, 3)))) %>%
mutate(p.value = paste0(p.value, star)) %>%
mutate(C.I. = CI_fmt(estimate, std.error)) %>%
dplyr::select(term, estimate, C.I., p.value)
}
tidy
tidy()
tidyr::tidy()
library(broom)
broom::tidy()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(broom)
library(toffee)
library(xtable)
make_model_tbl <- function(model){
tidy(model) %>%
mutate(star = ifelse(p.value < 0.05, "*", "")) %>%
mutate(O.R. = exp(estimate)) %>%
mutate(p.value = ifelse(p.value < 0.001, "<0.001", as.character(round(p.value, 3)))) %>%
mutate(p.value = paste0(p.value, star)) %>%
mutate(C.I. = CI_fmt(estimate, std.error)) %>%
dplyr::select(term, estimate, C.I., p.value)
}
counts_data <- read.csv("../data/harmful_counts_df.csv")
dems_data <- read.csv("../data/ALLDEMS.csv")
privacy <- read.csv("../rebuttal_analysis/privacysettings.csv")
ad_counts.dems <- merge(counts_data, dems_data, by="pid")
ad_counts.dems <- merge(ad_counts.dems, privacy, by.x="pid", by.y="PROLIFIC_PID") %>%
mutate(p_problematic = harmful_grouped / total) %>%
mutate(p_neutral = neutral / total) %>%
mutate(p_healthcare = healthcare / total) %>%
mutate(p_opportunity = opportunity / total) %>%
mutate(p_prohibited = prohibited / total) %>%
mutate(p_deceptive = deceptive / total) %>%
mutate(p_clickbait = clickbait / total) %>%
mutate(p_financial = financial / total) %>%
mutate(p_sensitive = sensitive / total) %>%
mutate(race = as.factor(case_when(
black == 1 ~ 2,
asian == 1 ~ 3,
white == 1 ~ 1,
))) %>%
mutate(race = relevel(race, 1))
mod.frac_problematic_pref <- lm(
p_problematic ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_prohibited_pref <- lm(
p_prohibited ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_deceptive_pref <- lm(
p_deceptive ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_clickbait_pref <- lm(
p_clickbait ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_financial_pref <- lm(
p_financial ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_sensitive_pref <- lm(
p_sensitive ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_healthcare_pref <- lm(
p_healthcare ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
mod.frac_opportunity_pref <- lm(
p_opportunity ~ woman + as.factor(race) + hispanic + high_ed + older + privacysettings,
data=ad_counts.dems)
omnibus.model.params <- tidy(mod.frac_problematic_pref) %>%
select(cols) %>%
mutate(estimate.omnibus = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
# add confidence interval column
mutate(CI = toffee_tbl(mod.frac_problematic_pref)$CI) %>%
# put CI below estimate
mutate(estimate.omnibus = paste0("\\shortstack{", estimate.omnibus,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
tidy(mod.frac_problematic_pref)
cols <- c('estimate', 'p.value')
omnibus.model.params <- tidy(mod.frac_problematic_pref) %>%
select(cols) %>%
mutate(estimate.omnibus = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
# add confidence interval column
mutate(CI = toffee_tbl(mod.frac_problematic_pref)$CI) %>%
# put CI below estimate
mutate(estimate.omnibus = paste0("\\shortstack{", estimate.omnibus,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
prohibited.model.params <- tidy(mod.frac_prohibited_pref) %>%
select(cols) %>%
mutate(estimate.prohibited = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_prohibited_pref)$CI) %>%
mutate(estimate.prohibited = paste0("\\shortstack{", estimate.prohibited,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
deceptive.model.params <- tidy(mod.frac_deceptive_pref) %>%
select(cols) %>%
mutate(estimate.deceptive = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_deceptive_pref)$CI) %>%
mutate(estimate.deceptive = paste0("\\shortstack{", estimate.deceptive,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
clickbait.model.params <- tidy(mod.frac_clickbait_pref) %>%
select(cols) %>%
mutate(estimate.clickbait = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_clickbait_pref)$CI) %>%
mutate(estimate.clickbait = paste0("\\shortstack{", estimate.clickbait,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
financial.model.params <- tidy(mod.frac_financial_pref) %>%
select(cols) %>%
mutate(estimate.financial = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_financial_pref)$CI) %>%
mutate(estimate.financial = paste0("\\shortstack{", estimate.financial,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
sensitive.model.params <- tidy(mod.frac_sensitive_pref) %>%
select(cols) %>%
mutate(estimate.sensitive = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_sensitive_pref)$CI) %>%
mutate(estimate.sensitive = paste0("\\shortstack{", estimate.sensitive,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
# ===== combine together =====
params.list <- list(omnibus.model.params, prohibited.model.params, deceptive.model.params,
clickbait.model.params, financial.model.params, sensitive.model.params)
all.params.problematic <- Reduce(function(x, y, ...) merge(x, y, by='term', ...), params.list)
cols <- c('term', 'estimate', 'p.value')
omnibus.model.params <- tidy(mod.frac_problematic_pref) %>%
select(cols) %>%
mutate(estimate.omnibus = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
# add confidence interval column
mutate(CI = toffee_tbl(mod.frac_problematic_pref)$CI) %>%
# put CI below estimate
mutate(estimate.omnibus = paste0("\\shortstack{", estimate.omnibus,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
prohibited.model.params <- tidy(mod.frac_prohibited_pref) %>%
select(cols) %>%
mutate(estimate.prohibited = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_prohibited_pref)$CI) %>%
mutate(estimate.prohibited = paste0("\\shortstack{", estimate.prohibited,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
deceptive.model.params <- tidy(mod.frac_deceptive_pref) %>%
select(cols) %>%
mutate(estimate.deceptive = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_deceptive_pref)$CI) %>%
mutate(estimate.deceptive = paste0("\\shortstack{", estimate.deceptive,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
clickbait.model.params <- tidy(mod.frac_clickbait_pref) %>%
select(cols) %>%
mutate(estimate.clickbait = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_clickbait_pref)$CI) %>%
mutate(estimate.clickbait = paste0("\\shortstack{", estimate.clickbait,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
financial.model.params <- tidy(mod.frac_financial_pref) %>%
select(cols) %>%
mutate(estimate.financial = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_financial_pref)$CI) %>%
mutate(estimate.financial = paste0("\\shortstack{", estimate.financial,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
sensitive.model.params <- tidy(mod.frac_sensitive_pref) %>%
select(cols) %>%
mutate(estimate.sensitive = case_when(
p.value < 0.001 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{***}$"),
p.value < 0.01 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^{**}$"),
p.value < 0.05 ~ paste0("\\textbf{", as.character(round(estimate, 3)), "}$^*$"),
p.value <= 0.1 ~ paste0(as.character(round(estimate, 3)), "$^+$"),
TRUE ~ as.character(round(estimate, 3)))) %>%
mutate(CI = toffee_tbl(mod.frac_sensitive_pref)$CI) %>%
mutate(estimate.sensitive = paste0("\\shortstack{", estimate.sensitive,
"\\\\ \\scriptsize{", CI ,"}}")) %>%
select(-CI, -p.value, -estimate)
# ===== combine together =====
params.list <- list(omnibus.model.params, prohibited.model.params, deceptive.model.params,
clickbait.model.params, financial.model.params, sensitive.model.params)
all.params.problematic <- Reduce(function(x, y, ...) merge(x, y, by='term', ...), params.list)
print(xtable(
all.params.problematic %>%
select(term, estimate.omnibus, estimate.prohibited, estimate.deceptive,
estimate.clickbait, estimate.financial, estimate.sensitive)
), sanitize.text.function=identity)
# ==== R^2 values ====
# print(paste0(summary(mod.frac_problematic)$r.squared, '&', summary(mod.frac_prohibited)$r.squared,
#      '&', summary(mod.frac_deceptive)$r.squared, '&', summary(mod.frac_clickbait)$r.squared, '&',
#      summary(mod.frac_financial)$r.squared, '&',
#      summary(mod.frac_sensitive)$r.squared))
table(ad_counts.dems$race)
dim(ad_counts.dems)
ad_counts.dems <- merge(counts_data, dems_data, by="pid") %>%
# ad_counts.dems <- merge(ad_counts.dems, privacy, by.x="pid", by.y="PROLIFIC_PID") %>%
mutate(p_problematic = harmful_grouped / total) %>%
mutate(p_neutral = neutral / total) %>%
mutate(p_healthcare = healthcare / total) %>%
mutate(p_opportunity = opportunity / total) %>%
mutate(p_prohibited = prohibited / total) %>%
mutate(p_deceptive = deceptive / total) %>%
mutate(p_clickbait = clickbait / total) %>%
mutate(p_financial = financial / total) %>%
mutate(p_sensitive = sensitive / total) %>%
mutate(race = as.factor(case_when(
black == 1 ~ 2,
asian == 1 ~ 3,
white == 1 ~ 1,
))) %>%
mutate(race = relevel(race, 1))
dim(ad_counts.dems)
table(ad_counts.dems$race)
counts_data <- read.csv("../data/harmful_counts_df.csv")
dems_data <- read.csv("../data/ALLDEMS.csv")
privacy <- read.csv("../rebuttal_analysis/privacysettings.csv")
ad_counts.dems <- merge(counts_data, dems_data, by="pid")
ad_counts.dems <- merge(ad_counts.dems, privacy, by.x="pid", by.y="PROLIFIC_PID") %>%
mutate(p_problematic = harmful_grouped / total) %>%
mutate(p_neutral = neutral / total) %>%
mutate(p_healthcare = healthcare / total) %>%
mutate(p_opportunity = opportunity / total) %>%
mutate(p_prohibited = prohibited / total) %>%
mutate(p_deceptive = deceptive / total) %>%
mutate(p_clickbait = clickbait / total) %>%
mutate(p_financial = financial / total) %>%
mutate(p_sensitive = sensitive / total) %>%
mutate(race = as.factor(case_when(
black == 1 ~ 2,
asian == 1 ~ 3,
white == 1 ~ 1,
))) %>%
mutate(race = relevel(race, 1))
privacy <- read.csv("../rebuttal_analysis/privacysettings.csv") %>%
filter(privacysettings < 6)
dim(ad_counts.dems)
ad_counts.dems <- merge(counts_data, dems_data, by="pid")
ad_counts.dems <- merge(ad_counts.dems, privacy, by.x="pid", by.y="PROLIFIC_PID") %>%
mutate(p_problematic = harmful_grouped / total) %>%
mutate(p_neutral = neutral / total) %>%
mutate(p_healthcare = healthcare / total) %>%
mutate(p_opportunity = opportunity / total) %>%
mutate(p_prohibited = prohibited / total) %>%
mutate(p_deceptive = deceptive / total) %>%
mutate(p_clickbait = clickbait / total) %>%
mutate(p_financial = financial / total) %>%
mutate(p_sensitive = sensitive / total) %>%
mutate(race = as.factor(case_when(
black == 1 ~ 2,
asian == 1 ~ 3,
white == 1 ~ 1,
))) %>%
mutate(race = relevel(race, 1))
dim(ad_counts.dems)
counts_data <- read.csv("../data/harmful_counts_df.csv")
dems_data <- read.csv("../data/ALLDEMS.csv")
privacy <- read.csv("../rebuttal_analysis/privacysettings.csv") %>%
filter(privacysettings < 6)
ad_counts.dems <- merge(counts_data, dems_data, by="pid")
ad_counts.dems <- merge(ad_counts.dems, privacy, by.x="pid", by.y="PROLIFIC_PID") %>%
mutate(p_problematic = harmful_grouped / total) %>%
mutate(p_neutral = neutral / total) %>%
mutate(p_healthcare = healthcare / total) %>%
mutate(p_opportunity = opportunity / total) %>%
mutate(p_prohibited = prohibited / total) %>%
mutate(p_deceptive = deceptive / total) %>%
mutate(p_clickbait = clickbait / total) %>%
mutate(p_financial = financial / total) %>%
mutate(p_sensitive = sensitive / total) %>%
mutate(race = as.factor(case_when(
black == 1 ~ 2,
asian == 1 ~ 3,
white == 1 ~ 1,
))) %>%
mutate(race = relevel(race, 1))
dim(ad_counts.dems)
# === output from rq1_dislike_plot.py
# overall dislike: {'Potentially Prohibited': (85, 0.5, 170), 'Potentially Harmful': (146, 0.49158249158249157, 297), 'Clickbait': (241, 0.4898373983739837, 492), 'Financial': (319, 0.44677871148459386, 714), 'Sensitive': (160, 0.4155844155844156, 385), 'Opportunity': (341, 0.3186915887850467, 1070), 'Healthcare': (292, 0.3109691160809372, 939), 'Benign': (1067, 0.2924088791449712, 3649)}
totals <- c(
'clickbait' = 492,
'prohibited' = 170,
'healthcare' = 939,
'neutral' = 3649,
'sensitive' = 385,
'opportunity' = 1070,
'financial' = 714,
'deceptive' = 297
)
dont_like <- c(
'clickbait' = 241,
'prohibited' = 85,
'deceptive' = 146,
'sensitive' = 160,
'financial' = 319,
'opportunity' = 341,
'healthcare' = 292,
'neutral' = 1067
)
p_o=prop.test(
c(dont_like['clickbait'], dont_like['deceptive'], dont_like['prohibited'],
dont_like['sensitive'], dont_like['financial'], dont_like['opportunity'],
dont_like['healthcare'], dont_like['neutral']),
c(totals['clickbait'], totals['deceptive'], totals['prohibited'],
totals['sensitive'], totals['financial'], totals['opportunity'],
totals['healthcare'], totals['neutral'])
)
# SIGNIFICANT
#Pairwise comparisons decreasing sequential
p_1=prop.test(c(dont_like['prohibited'], dont_like['deceptive']), c(totals['prohibited'], totals['deceptive']))
p_2=prop.test(c(dont_like['deceptive'], dont_like['clickbait']), c(totals['deceptive'], totals['clickbait']))
p_3=prop.test(c(dont_like['clickbait'], dont_like['financial']), c(totals['clickbait'], totals['financial']))
p_4=prop.test(c(dont_like['financial'], dont_like['sensitive']), c(totals['financial'], totals['sensitive']))
p_5=prop.test(c(dont_like['sensitive'], dont_like['opportunity']), c(totals['sensitive'], totals['opportunity'])) # SIGNIFICANT
p_6=prop.test(c(dont_like['opportunity'], dont_like['healthcare']), c(totals['opportunity'], totals['healthcare']))
p_7=prop.test(c(dont_like['healthcare'], dont_like['neutral']), c(totals['healthcare'], totals['neutral']))
#adjusting omnibus and decreasing pairwise comparisons
print("pairwise comparisons decreasing order:")
p.adjust(c(p_o$p.value,p_1$p.value,p_2$p.value,p_3$p.value,p_4$p.value,p_5$p.value,p_6$p.value,p_7$p.value), method="BH" )
print(paste("chi-squared vals:", p_o$statistic, p_1$statistic, p_2$statistic, p_3$statistic, p_4$statistic, p_5$statistic, p_6$statistic, p_7$statistic))
#pairwise comparisons with neutral
p_1=prop.test(c(dont_like['prohibited'], dont_like['neutral']), c(totals['prohibited'], totals['neutral']))
p_2=prop.test(c(dont_like['deceptive'], dont_like['neutral']), c(totals['deceptive'], totals['neutral']))
p_3=prop.test(c(dont_like['clickbait'], dont_like['neutral']), c(totals['clickbait'], totals['neutral']))
p_5=prop.test(c(dont_like['financial'], dont_like['neutral']), c(totals['financial'], totals['neutral']))
p_4=prop.test(c(dont_like['sensitive'], dont_like['neutral']), c(totals['sensitive'], totals['neutral']))
p_6=prop.test(c(dont_like['opportunity'], dont_like['neutral']), c(totals['opportunity'], totals['neutral'])) # INSIGNIFICANT
p_7=prop.test(c(dont_like['healthcare'], dont_like['neutral']), c(totals['healthcare'], totals['neutral'])) # INSIGNIFICANT
#adjusting omnibus and pairwise-with-neutral comparisons
print("pairwise comparisons against neutral:")
p.adjust(c(p_o$p.value,p_1$p.value,p_2$p.value,p_3$p.value,p_4$p.value,p_5$p.value,p_6$p.value,p_7$p.value), method="BH" )
print(paste("chi-squared vals:", p_o$statistic, p_1$statistic, p_2$statistic, p_3$statistic, p_4$statistic, p_5$statistic, p_6$statistic, p_7$statistic))
prop.test(c(dont_like['prohibited'], dont_like['neutral']), c(totals['prohibited'], totals['neutral']))
chisq.test(c(dont_like['prohibited'], dont_like['neutral']), c(totals['prohibited'], totals['neutral']))
sqrt(32.251/2)
sqrt(32.251/4)
install.packages("rcomponion")
cohenW
library(rcompanion)
install.packages("rcompanion")
p_o=prop.test(
c(dont_like['clickbait'], dont_like['deceptive'], dont_like['prohibited'],
dont_like['sensitive'], dont_like['financial'], dont_like['opportunity'],
dont_like['healthcare'], dont_like['neutral']),
c(totals['clickbait'], totals['deceptive'], totals['prohibited'],
totals['sensitive'], totals['financial'], totals['opportunity'],
totals['healthcare'], totals['neutral'])
)
p_o
prop.test(c(dont_like['prohibited'], dont_like['deceptive']), c(totals['prohibited'], totals['deceptive']))
library(rcompanion)
cohenW(c(0.5, 0.49), p=c(.5, .5))
prop.test(c(dont_like['opportunity'], dont_like['healthcare']), c(totals['opportunity'], totals['healthcare']))
prop.test(c(dont_like['sensitive'], dont_like['opportunity']), c(totals['sensitive'], totals['opportunity'])) #
cohenW(c(0.4155844, 0.3186916), p=c(.5, .5))
sqrt(11.348)
sqrt(11.348/2)
cohenW(c(dont_like['sensitive'], dont_like['opportunity']), c(totals['sensitive'], totals['opportunity']))
cohenW(c(dont_like['opportunity'], dont_like['healthcare']), c(totals['opportunity'], totals['healthcare']))
ES.h
library(pwr)
cohenH
prop.test(c(dont_like['opportunity'], dont_like['healthcare']), c(totals['opportunity'], totals['healthcare']))
cohenH(c(c(dont_like['sensitive'], dont_like['opportunity']), c(totals['sensitive'], totals['opportunity'])))
;
remotes::install_github("markushuff/PsychHelperFunctions")
library(PsychHelperFunctions)
c(dont_like['prohibited'], dont_like['neutral']), c(totals['prohibited'], totals['neutral'])
prop.test(c(dont_like['prohibited'], dont_like['neutral']), c(totals['prohibited'], totals['neutral']))
p_1
p_1$statistic
cohens_w(p_1$statistic, 4)
cohens_w(p_1$statistic, dont_like['prohibited']+dont_like['neutral']+totals['prohibited']+totals['neutral'])
cohens_w(p_2$statistic, dont_like['deceptive']+dont_like['neutral']+totals['deceptive']+totals['neutral'])
p_2
p_0$statistic
p_o$statistic
cohens_w(p_o$statistic, dont_like['clickbait']+dont_like['deceptive']+dont_like['prohibited']+dont_like['sensitive']+dont_like['financial']+dont_like['opportunity']+dont_like['healthcare']+dont_like['neutral']+totals['clickbait']+totals['deceptive']+totals['prohibited']+totals['sensitive']+totals['financial'] +totals['opportunity'] + totals['healthcare'] + totals['neutral'])
cohens_w(500, dont_like['clickbait']+dont_like['deceptive']+dont_like['prohibited']+dont_like['sensitive']+dont_like['financial']+dont_like['opportunity']+dont_like['healthcare']+dont_like['neutral']+totals['clickbait']+totals['deceptive']+totals['prohibited']+totals['sensitive']+totals['financial'] +totals['opportunity'] + totals['healthcare'] + totals['neutral'])
